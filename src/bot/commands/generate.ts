import { SlashCommandBuilder, ChatInputCommandInteraction, AttachmentBuilder } from 'discord.js';
import { ConvexHttpClient } from 'convex/browser';
import { api } from '../../../convex/_generated/api.js';
import { generateImage } from '../../lib/nano-banana.js';
import { createSuccessEmbed, createErrorEmbed } from '../../lib/utils.js';

const convex = new ConvexHttpClient(process.env.CONVEX_URL!);

const DAILY_LIMIT = 5;

export const data = new SlashCommandBuilder()
  .setName('generate')
  .setDescription('Generate cannabis-themed AI art with Nano Banana')
  .addStringOption(option =>
    option
      .setName('prompt')
      .setDescription('Describe what you want to generate')
      .setRequired(true)
      .setMaxLength(500)
  );

export async function execute(interaction: ChatInputCommandInteraction) {
  try {
    // Defer immediately (must be within 3 seconds)
    await interaction.deferReply();

    const prompt = interaction.options.getString('prompt', true);

    // Get user
    const user = await convex.mutation(api.users.getOrCreateUser, {
      discordId: interaction.user.id,
      username: interaction.user.username,
    });

    // Check daily limit
    const today = new Date().toISOString().split('T')[0];
    if (user.imageGenerationsDate === today && user.imageGenerationsToday >= DAILY_LIMIT) {
      await interaction.editReply({
        embeds: [createErrorEmbed(`You've reached your daily limit of ${DAILY_LIMIT} image generations! Try again tomorrow.`)]
      });
      return;
    }

    // Enhance prompt with cannabis theme
    const enhancedPrompt = `High quality cannabis themed art: ${prompt}. Artistic, vibrant, cannabis leaves, professional photography style`;

    await interaction.editReply({
      embeds: [createSuccessEmbed(
        `üé® **Generating Image...**\n\n` +
        `Prompt: "${prompt}"\n\n` +
        `‚è≥ This may take 10-30 seconds...`
      )]
    });

    // Generate image using Gemini 2.5 Flash Image (Nano Banana)
    const imageBuffer = await generateImage(enhancedPrompt);

    if (!imageBuffer) {
      await interaction.editReply({
        embeds: [createErrorEmbed(
          '‚ö†Ô∏è **Image Generation Failed**\n\n' +
          'Could not generate image. This might be due to:\n' +
          '‚Ä¢ API rate limits\n' +
          '‚Ä¢ Invalid prompt\n' +
          '‚Ä¢ API key permissions\n\n' +
          'üí° Try again or use a different prompt.'
        )]
      });
      return;
    }

    // Update user's daily count
    const newCount = user.imageGenerationsDate === today ? user.imageGenerationsToday + 1 : 1;
    // Note: We'd need to add an updateImageCount mutation to convex

    // Create attachment
    const attachment = new AttachmentBuilder(imageBuffer, { name: 'generated.png' });

    const embed = createSuccessEmbed(
      `üé® **Image Generated!**\n\n` +
      `Prompt: "${prompt}"\n\n` +
      `üñºÔ∏è Generations today: **${newCount}/${DAILY_LIMIT}**\n\n` +
      `_Generated by Google Gemini 2.5 Flash Image_`
    );

    await interaction.editReply({ 
      embeds: [embed],
      files: [attachment]
    });
  } catch (error: any) {
    console.error('Generate error:', error);
    
    // Check if interaction is still valid
    if (interaction.deferred || interaction.replied) {
      try {
        await interaction.editReply({
          embeds: [createErrorEmbed(error.message || 'Failed to generate image')]
        });
      } catch (editError) {
        console.error('Failed to edit reply (interaction may have expired):', editError);
      }
    } else {
      try {
        await interaction.reply({
          embeds: [createErrorEmbed(error.message || 'Failed to generate image')],
          ephemeral: true
        });
      } catch (replyError) {
        console.error('Failed to reply (interaction may have expired):', replyError);
      }
    }
  }
}
